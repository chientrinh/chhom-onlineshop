<?php
namespace common\widgets\doc\purchase;

/**
 * $URL: https://tarax.toyouke.com/svn/MALL/common/widgets/doc/purchase/YamatoCsv.php $
 * $Id: YamatoCsv.php 4131 2019-03-27 09:04:33Z kawai $
 */

use Yii;
use \common\models\Company;
use \common\models\Payment;

class YamatoCsv extends \yii\base\Widget
{
    /* @var Purchase model */
    public $model;

    /* @var	ご請求先顧客コード 055786307501: TY自然農 */
    public $customercode = '055786307501';

    public $eol = "\r\n";

    public $header = [
             1 => '注文番号',
             2 => '送り状種別',
             3 => 'クール区分',
             4 => '伝票番号（データ出力用の項目として使用）',
             5 => '出荷予定日',
             6 => 'お届け予定（指定）日',
             7 => '配達時間帯',
             8 => 'お届け先コード',
             9 => 'お届け先電話番号',
            10 => 'お届け先電話番号枝番',
            11 => 'お届け先郵便番号',
            12 => 'お届け先住所',
            13 => 'お届け先住所（アパートマンション名）',
            14 => 'お届け先会社・部門名1',
            15 => 'お届け先会社・部門名2',
            16 => 'お届け先名',
            17 => 'お届け先名略称カナ',
            18 => '敬称 (DM便のみ指定可能)',
            19 => 'ご依頼主コード',
            20 => 'ご依頼主電話番号',
            21 => 'ご依頼主電話番号枝番',
            22 => 'ご依頼主郵便番号',
            23 => 'ご依頼主住所',
            24 => 'ご依頼主住所（アパートマンション名）',
            25 => 'ご依頼主名',
            26 => 'ご依頼主略称カナ',
            27 => '品名コード1',
            28 => '品名1',
            29 => '品名コード2',
            30 => '品名2',
            31 => '荷扱い1',
            32 => '荷扱い2',
            33 => '記事',
            34 => 'コレクト代金引換額（税込）',
            35 => 'コレクト内消費税額等',
            36 => '営業所止置き',
            37 => '営業所コード',
            38 => '発行枚数',
            39 => '個数口枠の印字',
            40 => 'ご請求先顧客コード',
            41 => 'ご請求先分類コード',
            42 => '運賃管理番号',
            43 => '注文時カード払いデータ登録',
            44 => '注文時カード払い加盟店番号',
            45 => '注文時カード払い申込受付番号1',
            46 => '注文時カード払い申込受付番号2',
            47 => '注文時カード払い申込受付番号3',
            48 => 'お届け予定ｅメール利用区分',
            49 => 'お届け予定ｅメールe-mailアドレス',
            50 => '入力機種',
            51 => 'お届け予定eメールメッセージ',
            52 => 'お届け完了ｅメール利用区分',
            53 => 'お届け完了ｅメールe-mailアドレス',
            54 => 'お届け完了eメールメッセージ',
            55 => 'クロネコ収納代行利用区分',
            56 => '予備',
            57 => '収納代行請求金額(税込)',
            58 => '収納代行内消費税額等',
            59 => '収納代行請求先郵便番号',
            60 => '収納代行請求先住所',
            61 => '収納代行請求先住所（アパートマンション名）',
            62 => '収納代行請求先会社・部門名1',
            63 => '収納代行請求先会社・部門名2',
            64 => '収納代行請求先名（漢字）',
            65 => '収納代行請求先名（カナ）',
            66 => '収納代行問合せ先名（漢字）',
            67 => '収納代行問合せ先郵便番号',
            68 => '収納代行問合せ先住所',
            69 => '収納代行問合せ先住所（アパートマンション名）',
            70 => '収納代行問合せ先電話番号',
            71 => '収納代行管理番号',
            72 => '収納代行品名',
            73 => '収納代行備考',
        ];

    public function init()
    {
        parent::init();
    }

    public function run()
    {
        $text = $this->renderCsv();

        return $text;
    }

    private function renderCsv()
    {
        if(! $delivery = $this->model->delivery)
            return null;

        $model       = $this->model;
        $branch      = $model->branch;
        $expect_date = $delivery->expect_date ? $delivery->expect_date  : '';
        $expect_time = $delivery->expect_time ? $delivery->time->csv_id : '';
        $addr        = self::adjustAddrField($delivery);
        $email       = $model->email ? $model->email : (($c = $model->customer) ? $c->email : null);
        $cool        = (Company::PKEY_TY == $model->company_id) ? 2 /*冷蔵*/ : 0 /*通常*/;
        $type        = in_array($model->payment_id, [Payment::PKEY_YAMATO_COD,
                                                     Payment::PKEY_DROP_SHIPPING])
                     ? 2  // コレクト
                     : 0; // 発払

        $items = [
            $model->purchase_id, // 1 お客様管理番号
            $type,         // 2	送り状種別: 0:発払,2:コレクト,3:DM便,4:タイム,5:着払,6:メール便速達サービス,7:ネコポス
            $cool,         // 3	クール区分: 0または空白:通常,1:クール冷凍,2:クール冷蔵 ※発払・コレクト・着払のみ指定可能
            "",            // 4 伝票番号（データ出力用の項目として使用）※ただし、データ入力時に使用する場合有り（伝票番号を指定して取込む場合のみ）
            date('Y/m/d'),// 5	出荷予定日
            empty($expect_date) ? "" : date('Y/m/d',strtotime($expect_date)), // 6	"お届け予定（指定）日" YYYY/MM/DD形式
            $expect_time, // 7	配達時間帯: 空白:指定なし,0812:午前中,1214,1416,1618,1820,2021:20～21時
            "", // 8	お届け先コード
            $delivery->tel, // 9	お届け先電話番号"
            "", // 10	お届け先電話番号枝番"
            $delivery->zip, // 11	お届け先郵便番号
            $addr[0], // 12	お届け先住所
            $addr[1], // 13	お届け先住所（アパートマンション名）"
            $addr[2], // 14	お届け先会社・部門名1"
            "", // 15	お届け先会社・部門名2"
            html_entity_decode($delivery->name), // 16	お届け先名
            "", // 17	お届け先名略称カナ
            "", // 18	敬称 (DM便のみ指定可能)
            "", // 19	ご依頼主コード
            $branch->tel, // 20	ご依頼主電話番号
            "", // 21	ご依頼主電話番号枝番"
            $branch->zip, // 22	ご依頼主郵便番号
            preg_replace('/ /','',$branch->addr), // 23	ご依頼主住所
            "", // 24	ご依頼主住所（アパートマンション名）"
            "豊受モール {$branch->name}", // 25	ご依頼主名
            "", // 26	ご依頼主略称カナ
            "", // 27	品名コード1
            (Company::PKEY_HP == $model->company_id) ? "書籍" : "健康食品・自然化粧品", // 28	品名1
            "", // 29	品名コード2
            "", // 30	品名2
            "", // 31	荷扱い1
            "", // 32	荷扱い2
            (($c = $model->customer) && ($c->name != $delivery->name))
                ? \yii\helpers\StringHelper::truncate($c->name.'様より', 16, '')
                : sprintf("%06d",$model->purchase_id), // 33	記事
            $model->total_charge, // 34	コレクト代金引換額（税込）
            $model->tax, // 35	コレクト内消費税額等
            "", // 36	営業所止置き
            "", // 37	営業所コード
            1 , // 38	発行枚数 通常は「1」, 発払・タイム・着払、ネコポスのみ「2」～「99」指定可能
            "", // 39	個数口枠の印字
            $this->customercode, // 40	ご請求先顧客コード 055786307501: TY自然農
            "", // 41	ご請求先分類コード
            "01", // 42	運賃管理番号 // 熱海は01固定
            0 , // 43	注文時カード払いデータ登録
            "", // 44	注文時カード払い加盟店番号
            "", // 45	注文時カード払い申込受付番号1
            "", // 46	注文時カード払い申込受付番号2
            "", // 47	注文時カード払い申込受付番号3
            0 , // 48	お届け予定ｅメール利用区分 0 = 利用しない, 1 = 利用する
            "", // 49	お届け予定ｅメールe-mailアドレス
            "", // 50	入力機種
            "この度は豊受モールをご利用いただき誠にありがとうございます。今回ご注文いただきました商品を本日クロネコヤマト便で発送いたしました。", // 51	お届け予定eメールメッセージ
            0 , // 52	お届け完了ｅメール利用区分
            "", // 53	お届け完了ｅメールe-mailアドレス
            "", // 54	お届け完了eメールメッセージ
            0 , // 55	クロネコ収納代行利用区分
            "", // 56	予備
            "", // 57	収納代行請求金額(税込)
            "", // 58	収納代行内消費税額等
            "", // 59	収納代行請求先郵便番号
            "", // 60	収納代行請求先住所
            "", // 61	収納代行請求先住所（アパートマンション名）
            "", // 62	収納代行請求先会社・部門名1
            "", // 63	収納代行請求先会社・部門名2
            "", // 64	収納代行請求先名（漢字）
            "", // 65	収納代行請求先名（カナ）
            "", // 66	収納代行問合せ先名（漢字）
            "", // 67	収納代行問合せ先郵便番号
            "", // 68	収納代行問合せ先住所
            "", // 69	収納代行問合せ先住所（アパートマンション名）
            "", // 70	収納代行問合せ先電話番号
            "", // 71	収納代行管理番号
            "", // 72	収納代行品名
            "", // 73	収納代行備考
            // "", // 74	予備
            // "", // 75	予備
            // "", // 76	予備
            // "", // 77	予備
            // "", // 78	予備
            // "", // 79	予備
            // "", // 80	予備
            // "", // 81	予備
            // "", // 82	予備
            // "", // 83	予備
            // "", // 84	予備
            // "", // 85	予備
            // "", // 86	予備
            // "", // 87	投函予定メール利用区分
            // "", // 88	投函予定メールe-mailアドレス
            // "", // 89	投函予定メールメッセージ
            // "", // 90	投函完了メール（受人宛て）利用区分
            // "", // 91	投函完了メール（受人）e-mailアドレス
            // "", // 92	投函完了メール（受人）メールメッセージ
            // "", // 93	投函完了メール（出人宛て）利用区分
            // "", // 94	投函完了メール（出人）e-mailアドレス
            // "", // 95	投函完了メール（出人）メールメッセージ
        ];

        return '"' . implode('","', $items) . '"' . $this->eol;
    }

    /**
     * @brief クロネコヤマトCSVの住所文字数上限(32, 16, 25)に揃える
     */
    private static function adjustAddrField($delivery)
    {
        $pref   = $delivery->pref ? $delivery->pref->name : '';
        $addr01 = $delivery->addr01;
        $addr02 = $delivery->addr02;
        $addr   = [];

        mb_internal_encoding("utf-8");

        if(mb_strlen($delivery->addr, 'utf-8') <= 32)
        {
            $addr[0] = $pref . $addr01 . $addr02;
            $addr[1] = null;
            $addr[2] = null;
        }
        elseif((mb_strlen($pref . $addr01, 'utf-8') <= 32 ) && (mb_strlen($addr02, 'utf-8') <= 16))
        {
            $addr[0] = $pref . $addr01;
            $addr[1] = $addr02;
            $addr[2] = null;
        }
        elseif((mb_strlen($pref . $addr01, 'utf-8') <= 32 ) && (mb_strlen($addr02, 'utf-8') <= 25))
        {
            $addr[0] = $pref . $addr01;
            $addr[1] = null;
            $addr[2] = $addr02;
        }
        elseif((mb_strlen($pref . $addr01, 'utf-8') <= (32 + 16)) && (mb_strlen($addr02, 'utf-8') <= 25))
        {
            $addr[0] = mb_substr($pref . $addr01, 0, 32);
            $addr[1] = mb_substr($pref . $addr01, 32);
            $addr[2] = $addr02;
        }
        elseif((mb_strlen($pref . $addr01, 'utf-8') <= 32) && (mb_strlen($addr02, 'utf-8') <= (16 + 25)))
        {
            $addr[0] = $pref . $addr01;
            if(mb_strlen($addr02, 'utf-8') <= 25)
            {
                $addr[1] = null;
                $addr[2] = $addr02;
            }
            else
            {
                $addr[1] = mb_substr($addr02, 0, 16);
                $addr[2] = mb_substr($addr02, 16);
            }
        }
        else
        {
            $whole = $pref . $addr01 . $addr02;
            $addr[0] = mb_substr($whole, 0, 32);  // 32 文字
            $addr[1] = mb_substr($whole, 32, 16); // 16 文字
            $addr[2] = mb_substr($whole, 32 + 16);// 何文字か不明、はみ出たら誰かが手作業で修正するはず
        }

        return $addr;
    }

}
